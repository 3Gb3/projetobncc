import re
import fitz
import json
from collections import defaultdict
import tkinter as tk
from tkinter import filedialog, messagebox, scrolledtext
import os
import sys
import platform
import subprocess
from pathlib import Path

# üîä Se quiser som personalizado, coloque um .wav chamado "cute.wav" na pasta
try:
    import winsound
    custom_sound = True
except:
    custom_sound = False

# ------------ FUN√á√ÉO PARA CARREGAR DESCRI√á√ïES DO JSON ------------

def carregar_descricoes(json_path="bncc_codigos.json"):
    try:
        with open(json_path, "r", encoding="utf-8") as f:
            descricoes = json.load(f)
        return descricoes
    except Exception as e:
        messagebox.showerror("Erro", f"N√£o foi poss√≠vel carregar o arquivo JSON:\n{e}")
        return {}

# ------------ L√ìGICA DO PROGRAMA ------------

def extrair_texto_pdf(caminho_arquivo):
    """Extrai texto de todas as p√°ginas do PDF."""
    try:
        doc = fitz.open(caminho_arquivo)
    except Exception as e:
        messagebox.showerror("Erro", f"N√£o foi poss√≠vel abrir o PDF:\n{e}")
        return ""
    texto = ""
    for pagina in doc:
        texto += pagina.get_text() + "\n"
    return texto

def extrair_codigos_bncc(texto):
    """Extrai e filtra c√≥digos BNCC v√°lidos."""
    padrao = re.compile(r"^EF\d{2}(LP|MA|ER|CI|HI|GE|AR|EF)[\w\-]*$")
    palavras = texto.split()
    codigos = []
    for p in palavras:
        p_limpo = re.sub(r"[^\w\-]", "", p).upper()
        if padrao.match(p_limpo):
            codigos.append(p_limpo)
    return list(dict.fromkeys(codigos))

def classificar_codigos(codigos):
    """Classifica os c√≥digos por √°rea."""
    categorias = defaultdict(list)
    for codigo in codigos:
        match = re.search(r"EF\d{2}([A-Z]{2})", codigo)
        if match:
            area = match.group(1)
            categorias[area].append(codigo)
        else:
            categorias["OUTROS"].append(codigo)
    return categorias

def gerar_relatorio_texto(categorias, descricoes):
    """Gera texto formatado do relat√≥rio com descri√ß√µes."""
    nomes_areas = {
        "LP": "L√≠ngua Portuguesa",
        "MA": "Matem√°tica",
        "ER": "Ensino Religioso",
        "CI": "Ci√™ncias",
        "HI": "Hist√≥ria",
        "GE": "Geografia",
        "AR": "Artes",
        "EF": "Educa√ß√£o F√≠sica",
        "OUTROS": "Outros / N√£o classificados"
    }
    linhas = []
    total_geral = sum(len(v) for v in categorias.values())
    linhas.append(f"üìÑ Total geral de c√≥digos encontrados: {total_geral}\n")
    for sigla, lista in categorias.items():
        nome = nomes_areas.get(sigla, sigla)
        linhas.append(f"‚û° {nome} (total: {len(lista)}):")
        for i, cod in enumerate(lista, 1):
            descricao = descricoes.get(cod, "Descri√ß√£o n√£o encontrada.")
            linhas.append(f"   {i}. ({cod}) - {descricao}")  # C√≥digo com par√™nteses
        linhas.append("")  # linha em branco entre categorias
    return "\n".join(linhas)

def salvar_txt(conteudo):
    """Salva relat√≥rio em Downloads do usu√°rio com nome fixo BNCC_Resultado.txt."""
    downloads = Path.home() / "Downloads"
    caminho_final = downloads / "BNCC_Resultado.txt"
    with open(caminho_final, "w", encoding="utf-8") as f:
        f.write(conteudo)
    return caminho_final

# ------------ FUN√á√ïES DA INTERFACE ------------

def tocar_som_suave():
    """Toca um som fofinho (usa cute.wav se existir, sen√£o beep suave)."""
    if custom_sound:
        # Se tiver um arquivo de som fofo, toca ele
        if os.path.exists("cute.wav"):
            winsound.PlaySound("cute.wav", winsound.SND_FILENAME)
        else:
            # Um beep mais suave (frequ√™ncia e dura√ß√£o)
            winsound.Beep(880, 150)  # 880Hz por 150ms
            winsound.Beep(1200, 150) # um tom mais alto rapidinho

def abrir_pasta(caminho):
    """Abre a pasta onde est√° o arquivo salvo."""
    pasta = os.path.dirname(str(caminho))
    if platform.system() == "Windows":
        subprocess.Popen(f'explorer "{pasta}"')
    elif platform.system() == "Darwin":  # Mac
        subprocess.Popen(["open", pasta])
    else:  # Linux
        subprocess.Popen(["xdg-open", pasta])

def selecionar_pdf():
    caminho = filedialog.askopenfilename(
        title="Selecione o PDF üíú",
        filetypes=[("Arquivos PDF", "*.pdf")]
    )
    if caminho:
        entry_pdf.delete(0, tk.END)
        entry_pdf.insert(0, caminho)

def processar_pdf():
    caminho_pdf = entry_pdf.get().strip()
    if not caminho_pdf:
        messagebox.showwarning("Ops!", "Escolha um arquivo PDF primeiro üíú")
        return

    texto = extrair_texto_pdf(caminho_pdf)
    if not texto.strip():
        messagebox.showwarning("Hmm...", "N√£o consegui extrair nada do PDF üò¢")
        return

    codigos = extrair_codigos_bncc(texto)
    categorias = classificar_codigos(codigos)

    descricoes = carregar_descricoes()  # Carrega as descri√ß√µes do JSON
    relatorio = gerar_relatorio_texto(categorias, descricoes)

    # Mostra na √°rea de texto
    text_area.delete(1.0, tk.END)
    text_area.insert(tk.END, relatorio)

    # Salva automaticamente em Downloads com nome BNCC_Manu.txt
    caminho_salvo = salvar_txt(relatorio)

    tocar_som_suave()

    lbl_status.config(
        text=f"‚úÖ Arquivo salvo com amor em:\n{caminho_salvo}",
        fg="#4b0082"
    )
    btn_abrir_pasta.config(command=lambda: abrir_pasta(caminho_salvo))
    btn_abrir_pasta.pack(pady=5)

# ------------ INTERFACE GR√ÅFICA ------------

root = tk.Tk()
root.title("üíú BNCC - Leitor üíú")

# √çcone de cora√ß√£o, se existir na pasta
if os.path.exists("heart.ico"):
    root.iconbitmap("heart.ico")

# üìè AUMENTEI altura da janela
root.geometry("850x850")  # mais alta
root.configure(bg="#fff0f6")  # rosa clarinho suave

# T√≠tulo fofinho
lbl_title = tk.Label(
    root,
    text="üå∏ BNCC üå∏\nLeitor de C√≥digos üíú",
    font=("Comic Sans MS", 22, "bold"),
    fg="#d63384",
    bg="#fff0f6"
)
lbl_title.pack(pady=15)

# Frame para sele√ß√£o de arquivo
frame_top = tk.Frame(root, bg="#fff0f6")
frame_top.pack(pady=10)

entry_pdf = tk.Entry(frame_top, width=60, font=("Segoe UI", 12))
entry_pdf.pack(side=tk.LEFT, padx=5)

btn_select = tk.Button(
    frame_top,
    text="üìÇ Escolher PDF",
    command=selecionar_pdf,
    font=("Segoe UI", 12, "bold"),
    bg="#ffc8dd",
    activebackground="#ffafcc"
)
btn_select.pack(side=tk.LEFT, padx=5)

# Bot√£o Processar
btn_process = tk.Button(
    root,
    text="üíú Processar üíú",
    command=processar_pdf,
    font=("Comic Sans MS", 15, "bold"),
    bg="#ffafcc",
    fg="white",
    activebackground="#ff85a2"
)
btn_process.pack(pady=15)

# üìú √Årea de texto com scroll, mais ALTA (20 linhas)
text_area = scrolledtext.ScrolledText(
    root,
    width=100,
    height=20,
    font=("Consolas", 11)
)
text_area.pack(padx=10, pady=10)

# Status de salvamento
lbl_status = tk.Label(
    root,
    text="",
    font=("Segoe UI", 11, "italic"),
    bg="#fff0f6",
    fg="#6a0572"
)
lbl_status.pack()

# Bot√£o para abrir pasta ap√≥s salvar
btn_abrir_pasta = tk.Button(
    root,
    text="üìÅ Abrir pasta do arquivo",
    font=("Segoe UI", 12, "bold"),
    bg="#cdb4db",
    activebackground="#bde0fe"
)

# Rodap√© fofo
lbl_footer = tk.Label(
    root,
    text="‚ú® Feito com muito carinho para Manu üíú",
    font=("Segoe UI", 11, "italic"),
    bg="#fff0f6",
    fg="#d63384"
)
lbl_footer.pack(side=tk.BOTTOM, pady=10)

root.mainloop()